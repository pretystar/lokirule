version: "3.4"

services:
  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    # command:
    #   - '--config.file=/etc/alertmanager/config.yml'
    #   - '--storage.path=/alertmanager'
    # volumes:
    #   - ./config/alertmanager.yml:/etc/alertmanager/config.yml
    ports:
      - 9093:9093
    networks:
      - public
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--enable-feature=remote-write-receiver'
    # command:
    #   - '--config.file=/etc/alertmanager/config.yml'
    #   - '--storage.path=/alertmanager'
    # volumes:
    #   - ./config/alertmanager-gotify.yml:/etc/alertmanager/config.yml
    ports:
      - 9090:9090
    networks:
      - public
  loki:
   image: grafana/loki
   container_name: loki
   volumes:
     - ./config/loki.yml:/etc/config/loki.yml
     - ./rules/demo/rules.yml:/etc/loki/rules/fake/rules.yml
   entrypoint:
     - /usr/bin/loki
     - -config.file=/etc/config/loki.yml
   ports:
     - "3100:3100"
   depends_on:
     - alertmanager
     - prometheus
   networks:
      - public

  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - ./config/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - grafana:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - loki
    networks:
      - public
  promtail:
    image: grafana/promtail
    container_name: promtail
    volumes:
      - ./config/promtail.yml:/etc/config/promtail.yml
      - ./logs:/logs/
    entrypoint:
     - /usr/bin/promtail
     - -config.file=/etc/config/promtail.yml
    # ports:
    #   - "3000:3000"
    depends_on:
      - loki
    networks:
      - public
  # webservice:
  #   image: nginx
  #   container_name: webservice
  #   ports:
  #     - 8000:80
  #   # logging:
  #   #   driver: loki
  #   #   options:
  #   #     loki-url: http://localhost:3100/loki/api/v1/push
  #   #     loki-external-labels: job=dockerlogs,environment=development
  #   depends_on:
  #     - loki
  #   networks:
  #     - public

  # http-client:
  #   image: alpine
  #   container_name: http-client
  #   entrypoint: |
  #     sh -c 'sh -s << EOF
  #     apk --no-cache add curl
  #     while true
  #       do
  #         curl http://webservice
  #       done
  #     EOF'
  #   depends_on:
  #     - webservice
  #   networks:
  #     - public

networks:
  public: {}

volumes:
  grafana: {}
